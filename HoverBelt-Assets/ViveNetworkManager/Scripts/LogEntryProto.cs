// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LogEntryProto.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace ViveNetworkManagerProto {

  /// <summary>Holder for reflection information generated from LogEntryProto.proto</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class LogEntryProtoReflection {

    #region Descriptor
    /// <summary>File descriptor for LogEntryProto.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static LogEntryProtoReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChNMb2dFbnRyeVByb3RvLnByb3RvEhdWaXZlTmV0d29ya01hbmFnZXJQcm90",
            "byLkAwoNTG9nRW50cnlQcm90bxIYChBnYW1lX29iamVjdF9uYW1lGAEgASgJ",
            "EhIKCm5ldHdvcmtfaWQYAiABKAkSEgoKY2xhc3NfbmFtZRgDIAEoCRJECghj",
            "bWRfbmFtZRgEIAEoDjIyLlZpdmVOZXR3b3JrTWFuYWdlclByb3RvLkxvZ0Vu",
            "dHJ5UHJvdG8uQ21kTmFtZUVudW0SPQoKcGFyYW1fbGlzdBgFIAEoCzIpLlZp",
            "dmVOZXR3b3JrTWFuYWdlclByb3RvLkNtZEdlbmVyaWNQYXJhbXMSFAoMZGF0",
            "ZXRpbWVfYmluGAYgASgDEhQKDG1hbnVhbF9wYXJzZRgHIAEoCBITCgtwcm90",
            "b19wYXJhbRgIIAEoDBITCgttZXRob2RfbmFtZRgJIAEoCRIVCg1kdXJhdGlv",
            "bl90aWNrGAogASgDIp4BCgtDbWROYW1lRW51bRIOCgpDbWRHZW5lcmljEAAS",
            "EQoNU2V0VHJhbnNmb3JtcxABEhgKFENtZEFkZFBvaW50TGVmdFByb3RvEAIS",
            "GQoVQ21kQWRkUG9pbnRSaWdodFByb3RvEAMSFAoQQ21kTmV3U3Ryb2tlTGVm",
            "dBAEEhUKEUNtZE5ld1N0cm9rZVJpZ2h0EAUSCgoGSEVBREVSEAYiUAoQQ21k",
            "R2VuZXJpY1BhcmFtcxI8Cg1jdXJyZW50X3BhcmFtGAEgAygLMiUuVml2ZU5l",
            "dHdvcmtNYW5hZ2VyUHJvdG8uR2VuZXJpY1BhcmFtIikKDEdlbmVyaWNQYXJh",
            "bRIMCgR0eXBlGAEgASgJEgsKA2JpbhgCIAEoDCJOChFMb2dFbnRyeVByb3Rv",
            "TGlzdBI5Cglsb2dfZW50cnkYASADKAsyJi5WaXZlTmV0d29ya01hbmFnZXJQ",
            "cm90by5Mb2dFbnRyeVByb3RvIn4KE1NldFRyYW5zZm9ybXNQYXJhbXMSEwoL",
            "Y29udHJvbGxlcjEYASABKAkSEwoLY29udHJvbGxlcjIYAiABKAkSEwoLY29u",
            "dHJvbGxlcjMYAyABKAkSEwoLY29udHJvbGxlcjQYBCABKAkSEwoLY29udHJv",
            "bGxlcjUYBSABKAkiMQoaQ21kQWRkUG9pbnRMZWZ0UHJvdG9QYXJhbXMSEwoL",
            "cG9pbnRTdHJpbmcYASABKAkiMgobQ21kQWRkUG9pbnRSaWdodFByb3RvUGFy",
            "YW1zEhMKC3BvaW50U3RyaW5nGAEgASgJYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::ViveNetworkManagerProto.LogEntryProto), global::ViveNetworkManagerProto.LogEntryProto.Parser, new[]{ "GameObjectName", "NetworkId", "ClassName", "CmdName", "ParamList", "DatetimeBin", "ManualParse", "ProtoParam", "MethodName", "DurationTick" }, null, new[]{ typeof(global::ViveNetworkManagerProto.LogEntryProto.Types.CmdNameEnum) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ViveNetworkManagerProto.CmdGenericParams), global::ViveNetworkManagerProto.CmdGenericParams.Parser, new[]{ "CurrentParam" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ViveNetworkManagerProto.GenericParam), global::ViveNetworkManagerProto.GenericParam.Parser, new[]{ "Type", "Bin" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ViveNetworkManagerProto.LogEntryProtoList), global::ViveNetworkManagerProto.LogEntryProtoList.Parser, new[]{ "LogEntry" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ViveNetworkManagerProto.SetTransformsParams), global::ViveNetworkManagerProto.SetTransformsParams.Parser, new[]{ "Controller1", "Controller2", "Controller3", "Controller4", "Controller5" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ViveNetworkManagerProto.CmdAddPointLeftProtoParams), global::ViveNetworkManagerProto.CmdAddPointLeftProtoParams.Parser, new[]{ "PointString" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ViveNetworkManagerProto.CmdAddPointRightProtoParams), global::ViveNetworkManagerProto.CmdAddPointRightProtoParams.Parser, new[]{ "PointString" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class LogEntryProto : pb::IMessage<LogEntryProto> {
    private static readonly pb::MessageParser<LogEntryProto> _parser = new pb::MessageParser<LogEntryProto>(() => new LogEntryProto());
    public static pb::MessageParser<LogEntryProto> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::ViveNetworkManagerProto.LogEntryProtoReflection.Descriptor.MessageTypes[0]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public LogEntryProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    public LogEntryProto(LogEntryProto other) : this() {
      gameObjectName_ = other.gameObjectName_;
      networkId_ = other.networkId_;
      className_ = other.className_;
      cmdName_ = other.cmdName_;
      ParamList = other.paramList_ != null ? other.ParamList.Clone() : null;
      datetimeBin_ = other.datetimeBin_;
      manualParse_ = other.manualParse_;
      protoParam_ = other.protoParam_;
      methodName_ = other.methodName_;
      durationTick_ = other.durationTick_;
    }

    public LogEntryProto Clone() {
      return new LogEntryProto(this);
    }

    /// <summary>Field number for the "game_object_name" field.</summary>
    public const int GameObjectNameFieldNumber = 1;
    private string gameObjectName_ = "";
    public string GameObjectName {
      get { return gameObjectName_; }
      set {
        gameObjectName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "network_id" field.</summary>
    public const int NetworkIdFieldNumber = 2;
    private string networkId_ = "";
    public string NetworkId {
      get { return networkId_; }
      set {
        networkId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "class_name" field.</summary>
    public const int ClassNameFieldNumber = 3;
    private string className_ = "";
    public string ClassName {
      get { return className_; }
      set {
        className_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cmd_name" field.</summary>
    public const int CmdNameFieldNumber = 4;
    private global::ViveNetworkManagerProto.LogEntryProto.Types.CmdNameEnum cmdName_ = 0;
    public global::ViveNetworkManagerProto.LogEntryProto.Types.CmdNameEnum CmdName {
      get { return cmdName_; }
      set {
        cmdName_ = value;
      }
    }

    /// <summary>Field number for the "param_list" field.</summary>
    public const int ParamListFieldNumber = 5;
    private global::ViveNetworkManagerProto.CmdGenericParams paramList_;
    /// <summary>
    ///  Generic parameter list
    /// </summary>
    public global::ViveNetworkManagerProto.CmdGenericParams ParamList {
      get { return paramList_; }
      set {
        paramList_ = value;
      }
    }

    /// <summary>Field number for the "datetime_bin" field.</summary>
    public const int DatetimeBinFieldNumber = 6;
    private long datetimeBin_;
    public long DatetimeBin {
      get { return datetimeBin_; }
      set {
        datetimeBin_ = value;
      }
    }

    /// <summary>Field number for the "manual_parse" field.</summary>
    public const int ManualParseFieldNumber = 7;
    private bool manualParse_;
    public bool ManualParse {
      get { return manualParse_; }
      set {
        manualParse_ = value;
      }
    }

    /// <summary>Field number for the "proto_param" field.</summary>
    public const int ProtoParamFieldNumber = 8;
    private pb::ByteString protoParam_ = pb::ByteString.Empty;
    /// <summary>
    ///  Binary version of the customized proto class
    /// </summary>
    public pb::ByteString ProtoParam {
      get { return protoParam_; }
      set {
        protoParam_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "method_name" field.</summary>
    public const int MethodNameFieldNumber = 9;
    private string methodName_ = "";
    /// <summary>
    ///  method name stored as string
    /// </summary>
    public string MethodName {
      get { return methodName_; }
      set {
        methodName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "duration_tick" field.</summary>
    public const int DurationTickFieldNumber = 10;
    private long durationTick_;
    public long DurationTick {
      get { return durationTick_; }
      set {
        durationTick_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as LogEntryProto);
    }

    public bool Equals(LogEntryProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GameObjectName != other.GameObjectName) return false;
      if (NetworkId != other.NetworkId) return false;
      if (ClassName != other.ClassName) return false;
      if (CmdName != other.CmdName) return false;
      if (!object.Equals(ParamList, other.ParamList)) return false;
      if (DatetimeBin != other.DatetimeBin) return false;
      if (ManualParse != other.ManualParse) return false;
      if (ProtoParam != other.ProtoParam) return false;
      if (MethodName != other.MethodName) return false;
      if (DurationTick != other.DurationTick) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (GameObjectName.Length != 0) hash ^= GameObjectName.GetHashCode();
      if (NetworkId.Length != 0) hash ^= NetworkId.GetHashCode();
      if (ClassName.Length != 0) hash ^= ClassName.GetHashCode();
      if (CmdName != 0) hash ^= CmdName.GetHashCode();
      if (paramList_ != null) hash ^= ParamList.GetHashCode();
      if (DatetimeBin != 0L) hash ^= DatetimeBin.GetHashCode();
      if (ManualParse != false) hash ^= ManualParse.GetHashCode();
      if (ProtoParam.Length != 0) hash ^= ProtoParam.GetHashCode();
      if (MethodName.Length != 0) hash ^= MethodName.GetHashCode();
      if (DurationTick != 0L) hash ^= DurationTick.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (GameObjectName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(GameObjectName);
      }
      if (NetworkId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NetworkId);
      }
      if (ClassName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ClassName);
      }
      if (CmdName != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) CmdName);
      }
      if (paramList_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(ParamList);
      }
      if (DatetimeBin != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(DatetimeBin);
      }
      if (ManualParse != false) {
        output.WriteRawTag(56);
        output.WriteBool(ManualParse);
      }
      if (ProtoParam.Length != 0) {
        output.WriteRawTag(66);
        output.WriteBytes(ProtoParam);
      }
      if (MethodName.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(MethodName);
      }
      if (DurationTick != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(DurationTick);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (GameObjectName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GameObjectName);
      }
      if (NetworkId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NetworkId);
      }
      if (ClassName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClassName);
      }
      if (CmdName != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CmdName);
      }
      if (paramList_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ParamList);
      }
      if (DatetimeBin != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(DatetimeBin);
      }
      if (ManualParse != false) {
        size += 1 + 1;
      }
      if (ProtoParam.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ProtoParam);
      }
      if (MethodName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MethodName);
      }
      if (DurationTick != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(DurationTick);
      }
      return size;
    }

    public void MergeFrom(LogEntryProto other) {
      if (other == null) {
        return;
      }
      if (other.GameObjectName.Length != 0) {
        GameObjectName = other.GameObjectName;
      }
      if (other.NetworkId.Length != 0) {
        NetworkId = other.NetworkId;
      }
      if (other.ClassName.Length != 0) {
        ClassName = other.ClassName;
      }
      if (other.CmdName != 0) {
        CmdName = other.CmdName;
      }
      if (other.paramList_ != null) {
        if (paramList_ == null) {
          paramList_ = new global::ViveNetworkManagerProto.CmdGenericParams();
        }
        ParamList.MergeFrom(other.ParamList);
      }
      if (other.DatetimeBin != 0L) {
        DatetimeBin = other.DatetimeBin;
      }
      if (other.ManualParse != false) {
        ManualParse = other.ManualParse;
      }
      if (other.ProtoParam.Length != 0) {
        ProtoParam = other.ProtoParam;
      }
      if (other.MethodName.Length != 0) {
        MethodName = other.MethodName;
      }
      if (other.DurationTick != 0L) {
        DurationTick = other.DurationTick;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            GameObjectName = input.ReadString();
            break;
          }
          case 18: {
            NetworkId = input.ReadString();
            break;
          }
          case 26: {
            ClassName = input.ReadString();
            break;
          }
          case 32: {
            cmdName_ = (global::ViveNetworkManagerProto.LogEntryProto.Types.CmdNameEnum) input.ReadEnum();
            break;
          }
          case 42: {
            if (paramList_ == null) {
              paramList_ = new global::ViveNetworkManagerProto.CmdGenericParams();
            }
            input.ReadMessage(paramList_);
            break;
          }
          case 48: {
            DatetimeBin = input.ReadInt64();
            break;
          }
          case 56: {
            ManualParse = input.ReadBool();
            break;
          }
          case 66: {
            ProtoParam = input.ReadBytes();
            break;
          }
          case 74: {
            MethodName = input.ReadString();
            break;
          }
          case 80: {
            DurationTick = input.ReadInt64();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the LogEntryProto message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum CmdNameEnum {
        [pbr::OriginalName("CmdGeneric")] CmdGeneric = 0,
        /// <summary>
        ///  this has three string as argument
        /// </summary>
        [pbr::OriginalName("SetTransforms")] SetTransforms = 1,
        /// <summary>
        ///  this two have a string as argument, warpped by xxxParams
        /// </summary>
        [pbr::OriginalName("CmdAddPointLeftProto")] CmdAddPointLeftProto = 2,
        [pbr::OriginalName("CmdAddPointRightProto")] CmdAddPointRightProto = 3,
        /// <summary>
        ///  this two have no arguments
        /// </summary>
        [pbr::OriginalName("CmdNewStrokeLeft")] CmdNewStrokeLeft = 4,
        [pbr::OriginalName("CmdNewStrokeRight")] CmdNewStrokeRight = 5,
        [pbr::OriginalName("HEADER")] Header = 6,
      }

    }
    #endregion

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CmdGenericParams : pb::IMessage<CmdGenericParams> {
    private static readonly pb::MessageParser<CmdGenericParams> _parser = new pb::MessageParser<CmdGenericParams>(() => new CmdGenericParams());
    public static pb::MessageParser<CmdGenericParams> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::ViveNetworkManagerProto.LogEntryProtoReflection.Descriptor.MessageTypes[1]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public CmdGenericParams() {
      OnConstruction();
    }

    partial void OnConstruction();

    public CmdGenericParams(CmdGenericParams other) : this() {
      currentParam_ = other.currentParam_.Clone();
    }

    public CmdGenericParams Clone() {
      return new CmdGenericParams(this);
    }

    /// <summary>Field number for the "current_param" field.</summary>
    public const int CurrentParamFieldNumber = 1;
    private static readonly pb::FieldCodec<global::ViveNetworkManagerProto.GenericParam> _repeated_currentParam_codec
        = pb::FieldCodec.ForMessage(10, global::ViveNetworkManagerProto.GenericParam.Parser);
    private readonly pbc::RepeatedField<global::ViveNetworkManagerProto.GenericParam> currentParam_ = new pbc::RepeatedField<global::ViveNetworkManagerProto.GenericParam>();
    public pbc::RepeatedField<global::ViveNetworkManagerProto.GenericParam> CurrentParam {
      get { return currentParam_; }
    }

    public override bool Equals(object other) {
      return Equals(other as CmdGenericParams);
    }

    public bool Equals(CmdGenericParams other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!currentParam_.Equals(other.currentParam_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= currentParam_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      currentParam_.WriteTo(output, _repeated_currentParam_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += currentParam_.CalculateSize(_repeated_currentParam_codec);
      return size;
    }

    public void MergeFrom(CmdGenericParams other) {
      if (other == null) {
        return;
      }
      currentParam_.Add(other.currentParam_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            currentParam_.AddEntriesFrom(input, _repeated_currentParam_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GenericParam : pb::IMessage<GenericParam> {
    private static readonly pb::MessageParser<GenericParam> _parser = new pb::MessageParser<GenericParam>(() => new GenericParam());
    public static pb::MessageParser<GenericParam> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::ViveNetworkManagerProto.LogEntryProtoReflection.Descriptor.MessageTypes[2]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public GenericParam() {
      OnConstruction();
    }

    partial void OnConstruction();

    public GenericParam(GenericParam other) : this() {
      type_ = other.type_;
      bin_ = other.bin_;
    }

    public GenericParam Clone() {
      return new GenericParam(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private string type_ = "";
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bin" field.</summary>
    public const int BinFieldNumber = 2;
    private pb::ByteString bin_ = pb::ByteString.Empty;
    /// <summary>
    ///  Currently unused
    /// </summary>
    public pb::ByteString Bin {
      get { return bin_; }
      set {
        bin_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as GenericParam);
    }

    public bool Equals(GenericParam other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Bin != other.Bin) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (Bin.Length != 0) hash ^= Bin.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Type.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Type);
      }
      if (Bin.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Bin);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (Bin.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Bin);
      }
      return size;
    }

    public void MergeFrom(GenericParam other) {
      if (other == null) {
        return;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      if (other.Bin.Length != 0) {
        Bin = other.Bin;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Type = input.ReadString();
            break;
          }
          case 18: {
            Bin = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class LogEntryProtoList : pb::IMessage<LogEntryProtoList> {
    private static readonly pb::MessageParser<LogEntryProtoList> _parser = new pb::MessageParser<LogEntryProtoList>(() => new LogEntryProtoList());
    public static pb::MessageParser<LogEntryProtoList> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::ViveNetworkManagerProto.LogEntryProtoReflection.Descriptor.MessageTypes[3]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public LogEntryProtoList() {
      OnConstruction();
    }

    partial void OnConstruction();

    public LogEntryProtoList(LogEntryProtoList other) : this() {
      logEntry_ = other.logEntry_.Clone();
    }

    public LogEntryProtoList Clone() {
      return new LogEntryProtoList(this);
    }

    /// <summary>Field number for the "log_entry" field.</summary>
    public const int LogEntryFieldNumber = 1;
    private static readonly pb::FieldCodec<global::ViveNetworkManagerProto.LogEntryProto> _repeated_logEntry_codec
        = pb::FieldCodec.ForMessage(10, global::ViveNetworkManagerProto.LogEntryProto.Parser);
    private readonly pbc::RepeatedField<global::ViveNetworkManagerProto.LogEntryProto> logEntry_ = new pbc::RepeatedField<global::ViveNetworkManagerProto.LogEntryProto>();
    public pbc::RepeatedField<global::ViveNetworkManagerProto.LogEntryProto> LogEntry {
      get { return logEntry_; }
    }

    public override bool Equals(object other) {
      return Equals(other as LogEntryProtoList);
    }

    public bool Equals(LogEntryProtoList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!logEntry_.Equals(other.logEntry_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= logEntry_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      logEntry_.WriteTo(output, _repeated_logEntry_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += logEntry_.CalculateSize(_repeated_logEntry_codec);
      return size;
    }

    public void MergeFrom(LogEntryProtoList other) {
      if (other == null) {
        return;
      }
      logEntry_.Add(other.logEntry_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            logEntry_.AddEntriesFrom(input, _repeated_logEntry_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class SetTransformsParams : pb::IMessage<SetTransformsParams> {
    private static readonly pb::MessageParser<SetTransformsParams> _parser = new pb::MessageParser<SetTransformsParams>(() => new SetTransformsParams());
    public static pb::MessageParser<SetTransformsParams> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::ViveNetworkManagerProto.LogEntryProtoReflection.Descriptor.MessageTypes[4]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public SetTransformsParams() {
      OnConstruction();
    }

    partial void OnConstruction();

    public SetTransformsParams(SetTransformsParams other) : this() {
      controller1_ = other.controller1_;
      controller2_ = other.controller2_;
      controller3_ = other.controller3_;
      controller4_ = other.controller4_;
      controller5_ = other.controller5_;
    }

    public SetTransformsParams Clone() {
      return new SetTransformsParams(this);
    }

    /// <summary>Field number for the "controller1" field.</summary>
    public const int Controller1FieldNumber = 1;
    private string controller1_ = "";
    public string Controller1 {
      get { return controller1_; }
      set {
        controller1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "controller2" field.</summary>
    public const int Controller2FieldNumber = 2;
    private string controller2_ = "";
    public string Controller2 {
      get { return controller2_; }
      set {
        controller2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "controller3" field.</summary>
    public const int Controller3FieldNumber = 3;
    private string controller3_ = "";
    public string Controller3 {
      get { return controller3_; }
      set {
        controller3_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "controller4" field.</summary>
    public const int Controller4FieldNumber = 4;
    private string controller4_ = "";
    public string Controller4 {
      get { return controller4_; }
      set {
        controller4_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "controller5" field.</summary>
    public const int Controller5FieldNumber = 5;
    private string controller5_ = "";
    public string Controller5 {
      get { return controller5_; }
      set {
        controller5_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as SetTransformsParams);
    }

    public bool Equals(SetTransformsParams other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Controller1 != other.Controller1) return false;
      if (Controller2 != other.Controller2) return false;
      if (Controller3 != other.Controller3) return false;
      if (Controller4 != other.Controller4) return false;
      if (Controller5 != other.Controller5) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Controller1.Length != 0) hash ^= Controller1.GetHashCode();
      if (Controller2.Length != 0) hash ^= Controller2.GetHashCode();
      if (Controller3.Length != 0) hash ^= Controller3.GetHashCode();
      if (Controller4.Length != 0) hash ^= Controller4.GetHashCode();
      if (Controller5.Length != 0) hash ^= Controller5.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Controller1.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Controller1);
      }
      if (Controller2.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Controller2);
      }
      if (Controller3.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Controller3);
      }
      if (Controller4.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Controller4);
      }
      if (Controller5.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Controller5);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Controller1.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Controller1);
      }
      if (Controller2.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Controller2);
      }
      if (Controller3.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Controller3);
      }
      if (Controller4.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Controller4);
      }
      if (Controller5.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Controller5);
      }
      return size;
    }

    public void MergeFrom(SetTransformsParams other) {
      if (other == null) {
        return;
      }
      if (other.Controller1.Length != 0) {
        Controller1 = other.Controller1;
      }
      if (other.Controller2.Length != 0) {
        Controller2 = other.Controller2;
      }
      if (other.Controller3.Length != 0) {
        Controller3 = other.Controller3;
      }
      if (other.Controller4.Length != 0) {
        Controller4 = other.Controller4;
      }
      if (other.Controller5.Length != 0) {
        Controller5 = other.Controller5;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Controller1 = input.ReadString();
            break;
          }
          case 18: {
            Controller2 = input.ReadString();
            break;
          }
          case 26: {
            Controller3 = input.ReadString();
            break;
          }
          case 34: {
            Controller4 = input.ReadString();
            break;
          }
          case 42: {
            Controller5 = input.ReadString();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CmdAddPointLeftProtoParams : pb::IMessage<CmdAddPointLeftProtoParams> {
    private static readonly pb::MessageParser<CmdAddPointLeftProtoParams> _parser = new pb::MessageParser<CmdAddPointLeftProtoParams>(() => new CmdAddPointLeftProtoParams());
    public static pb::MessageParser<CmdAddPointLeftProtoParams> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::ViveNetworkManagerProto.LogEntryProtoReflection.Descriptor.MessageTypes[5]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public CmdAddPointLeftProtoParams() {
      OnConstruction();
    }

    partial void OnConstruction();

    public CmdAddPointLeftProtoParams(CmdAddPointLeftProtoParams other) : this() {
      pointString_ = other.pointString_;
    }

    public CmdAddPointLeftProtoParams Clone() {
      return new CmdAddPointLeftProtoParams(this);
    }

    /// <summary>Field number for the "pointString" field.</summary>
    public const int PointStringFieldNumber = 1;
    private string pointString_ = "";
    public string PointString {
      get { return pointString_; }
      set {
        pointString_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as CmdAddPointLeftProtoParams);
    }

    public bool Equals(CmdAddPointLeftProtoParams other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PointString != other.PointString) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (PointString.Length != 0) hash ^= PointString.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (PointString.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PointString);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (PointString.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PointString);
      }
      return size;
    }

    public void MergeFrom(CmdAddPointLeftProtoParams other) {
      if (other == null) {
        return;
      }
      if (other.PointString.Length != 0) {
        PointString = other.PointString;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            PointString = input.ReadString();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CmdAddPointRightProtoParams : pb::IMessage<CmdAddPointRightProtoParams> {
    private static readonly pb::MessageParser<CmdAddPointRightProtoParams> _parser = new pb::MessageParser<CmdAddPointRightProtoParams>(() => new CmdAddPointRightProtoParams());
    public static pb::MessageParser<CmdAddPointRightProtoParams> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::ViveNetworkManagerProto.LogEntryProtoReflection.Descriptor.MessageTypes[6]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public CmdAddPointRightProtoParams() {
      OnConstruction();
    }

    partial void OnConstruction();

    public CmdAddPointRightProtoParams(CmdAddPointRightProtoParams other) : this() {
      pointString_ = other.pointString_;
    }

    public CmdAddPointRightProtoParams Clone() {
      return new CmdAddPointRightProtoParams(this);
    }

    /// <summary>Field number for the "pointString" field.</summary>
    public const int PointStringFieldNumber = 1;
    private string pointString_ = "";
    public string PointString {
      get { return pointString_; }
      set {
        pointString_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as CmdAddPointRightProtoParams);
    }

    public bool Equals(CmdAddPointRightProtoParams other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PointString != other.PointString) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (PointString.Length != 0) hash ^= PointString.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (PointString.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PointString);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (PointString.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PointString);
      }
      return size;
    }

    public void MergeFrom(CmdAddPointRightProtoParams other) {
      if (other == null) {
        return;
      }
      if (other.PointString.Length != 0) {
        PointString = other.PointString;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            PointString = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
